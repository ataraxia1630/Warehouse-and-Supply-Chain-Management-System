generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth: refresh tokens table references existing User model below

model RefreshToken {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userEmail  String
  userRole   UserRole
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?
}

/**
 * ENUMS
 */
enum OrderStatus {
  pending
  approved
  processing
  shipped
  closed
  cancelled
}

enum PoStatus {
  draft
  ordered
  received
  partial
  cancelled
}

enum StockMovementType {
  purchase_receipt
  sale_issue
  adjustment
  transfer_in
  transfer_out
  returned
  reservation
  consumption
}

enum ShipmentStatus {
  preparing
  in_transit
  delivered
  delayed
  cancelled
}

enum UserRole {
  admin
  manager
  warehouse_staff
  procurement
  logistics
  partner
}

/**
 * MODELS
 */
model Warehouse {
  id        String   @id @default(uuid()) @db.Uuid
  code      String   @unique @db.VarChar(50)
  name      String   @db.VarChar(200)
  address   String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations Location[]
}

model Location {
  id          String   @id @default(uuid()) @db.Uuid
  warehouseId String   @db.Uuid
  code        String   @db.VarChar(100)
  name        String?  @db.VarChar(200)
  capacity    Int?
  type        String?  @db.VarChar(50)
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  warehouse      Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  inventory      Inventory[]
  stockMovesFrom StockMovement[] @relation("FromLoc")
  stockMovesTo   StockMovement[] @relation("ToLoc")

  @@unique([warehouseId, code])
  @@index([warehouseId], name: "idx_location_warehouse")
}

model ProductCategory {
  id       String  @id @default(uuid()) @db.Uuid
  name     String  @unique @db.VarChar(200)
  parentId String? @db.Uuid
  metadata Json?

  parent   ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ProductCategory[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id         String   @id @default(uuid()) @db.Uuid
  sku        String   @unique @db.VarChar(100)
  name       String   @db.VarChar(300)
  categoryId String?  @db.Uuid
  unit       String   @db.VarChar(50)
  barcode    String?  @db.VarChar(200)
  parameters Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category      ProductCategory?    @relation(fields: [categoryId], references: [id])
  batches       ProductBatch[]
  stockMoves    StockMovement[]
  poItems       PurchaseOrderItem[]
  soItems       SalesOrderItem[]
  shipmentItems ShipmentItem[]

  @@index([sku], name: "idx_product_sku")
}

model ProductBatch {
  id               String    @id @default(uuid()) @db.Uuid
  productId        String    @db.Uuid
  batchNo          String?
  quantity         Int       @default(0)
  manufactureDate  DateTime?
  expiryDate       DateTime?
  barcodeOrQr      String?
  inboundReceiptId String?   @db.Uuid
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  product       Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory     Inventory[]
  stockMoves    StockMovement[]
  poItems       PurchaseOrderItem[]
  soItems       SalesOrderItem[]
  shipmentItems ShipmentItem[]

  @@unique([productId, batchNo])
  @@index([productId], name: "idx_productbatch_product")
}

model Inventory {
  id             String   @id @default(uuid()) @db.Uuid
  productBatchId String   @db.Uuid
  locationId     String   @db.Uuid
  availableQty   Int      @default(0)
  reservedQty    Int      @default(0)
  updatedAt      DateTime @updatedAt

  productBatch ProductBatch @relation(fields: [productBatchId], references: [id], onDelete: Cascade)
  location     Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([productBatchId, locationId])
  @@index([locationId], name: "idx_inventory_location")
  @@index([productBatchId], name: "idx_inventory_product")
}

model StockMovement {
  id             String            @id @default(uuid()) @db.Uuid
  movementType   StockMovementType
  productBatchId String?           @db.Uuid
  productId      String?           @db.Uuid
  fromLocationId String?           @db.Uuid
  toLocationId   String?           @db.Uuid
  quantity       Int
  reference      String?
  note           String?
  createdById    String?           @db.Uuid
  createdAt      DateTime          @default(now())
  idempotencyKey String?           @unique

  productBatch ProductBatch? @relation(fields: [productBatchId], references: [id])
  product      Product?      @relation(fields: [productId], references: [id])
  fromLocation Location?     @relation("FromLoc", fields: [fromLocationId], references: [id])
  toLocation   Location?     @relation("ToLoc", fields: [toLocationId], references: [id])
  createdBy    User?         @relation("UserStockMovements", fields: [createdById], references: [id])
}

model Supplier {
  id          String   @id @default(uuid()) @db.Uuid
  code        String?  @unique @db.VarChar(100)
  name        String   @db.VarChar(300)
  contactInfo Json?
  address     String?
  createdAt   DateTime @default(now())

  purchaseOrders PurchaseOrder[]
}

model Customer {
  id          String   @id @default(uuid()) @db.Uuid
  code        String?  @unique @db.VarChar(100)
  name        String   @db.VarChar(300)
  contactInfo Json?
  address     String?
  createdAt   DateTime @default(now())

  salesOrders SalesOrder[]
}

model PurchaseOrder {
  id              String    @id @default(uuid()) @db.Uuid
  poNo            String    @unique @db.VarChar(100)
  supplierId      String?   @db.Uuid
  status          PoStatus  @default(draft)
  placedAt        DateTime?
  expectedArrival DateTime?
  totalAmount     Decimal?  @db.Decimal(15, 2)
  notes           String?
  createdById     String?   @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  supplier  Supplier?           @relation(fields: [supplierId], references: [id])
  createdBy User?               @relation("UserCreatedPO", fields: [createdById], references: [id])
  items     PurchaseOrderItem[]

  @@index([status], name: "idx_po_status")
}

model PurchaseOrderItem {
  id              String   @id @default(uuid()) @db.Uuid
  purchaseOrderId String   @db.Uuid
  productId       String   @db.Uuid
  productBatchId  String?  @db.Uuid
  qtyOrdered      Int
  qtyReceived     Int      @default(0)
  unitPrice       Decimal? @db.Decimal(12, 2)
  lineTotal       Decimal? @db.Decimal(15, 2)
  remark          String?

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])
  productBatch  ProductBatch? @relation(fields: [productBatchId], references: [id])
}

model SalesOrder {
  id          String      @id @default(uuid()) @db.Uuid
  soNo        String      @unique @db.VarChar(100)
  customerId  String?     @db.Uuid
  status      OrderStatus @default(pending)
  placedAt    DateTime?
  totalAmount Decimal?    @db.Decimal(15, 2)
  createdById String?     @db.Uuid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  customer     Customer?        @relation(fields: [customerId], references: [id])
  createdBy    User?            @relation("UserCreatedSO", fields: [createdById], references: [id])
  items        SalesOrderItem[]
  ShipmentItem ShipmentItem[]

  @@index([status], name: "idx_so_status")
}

model SalesOrderItem {
  id             String   @id @default(uuid()) @db.Uuid
  salesOrderId   String   @db.Uuid
  productId      String   @db.Uuid
  productBatchId String?  @db.Uuid
  qty            Int
  unitPrice      Decimal? @db.Decimal(12, 2)
  lineTotal      Decimal? @db.Decimal(15, 2)

  salesOrder   SalesOrder    @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product      Product       @relation(fields: [productId], references: [id])
  productBatch ProductBatch? @relation(fields: [productBatchId], references: [id])
}

model Shipment {
  id                String         @id @default(uuid()) @db.Uuid
  shipmentNo        String?        @unique @db.VarChar(120)
  carrier           String?
  trackingCode      String?
  status            ShipmentStatus @default(preparing)
  shippedAt         DateTime?
  deliveredAt       DateTime?
  estimatedDelivery DateTime?
  notes             String?

  items          ShipmentItem[]
  trackingEvents ShipmentTrackingEvent[]
}

model ShipmentItem {
  id             String  @id @default(uuid()) @db.Uuid
  shipmentId     String  @db.Uuid
  salesOrderId   String? @db.Uuid
  productId      String? @db.Uuid
  productBatchId String? @db.Uuid
  qty            Int

  shipment     Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  salesOrder   SalesOrder?   @relation(fields: [salesOrderId], references: [id])
  product      Product?      @relation(fields: [productId], references: [id])
  productBatch ProductBatch? @relation(fields: [productBatchId], references: [id])
}

model ShipmentTrackingEvent {
  id         String   @id @default(uuid()) @db.Uuid
  shipmentId String   @db.Uuid
  eventTime  DateTime @default(now())
  location   String?
  statusText String?
  rawPayload Json?

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  username     String   @unique @db.VarChar(150)
  fullName     String?
  passwordHash String?
  email        String?  @unique
  role         UserRole @default(warehouse_staff)
  active       Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())

  purchaseOrders PurchaseOrder[] @relation("UserCreatedPO")
  salesOrders    SalesOrder[]    @relation("UserCreatedSO")
  stockMovements StockMovement[] @relation("UserStockMovements")
  refreshTokens  RefreshToken[]
}

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  entityType  String?
  entityId    String?
  action      String?
  payload     Json?
  performedBy String?  @db.Uuid
  performedAt DateTime @default(now())
}

model Alert {
  id          String    @id @default(uuid()) @db.Uuid
  type        String?
  referenceId String?   @db.Uuid
  payload     Json?
  severity    String?
  resolved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
}
